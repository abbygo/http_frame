import sys
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel


class User(BaseModel):
    id: int
    name = 'John Doe'
    signup_ts: Optional[datetime] = None
    friends: List[int] = []




external_data = {
    'id': '123',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, 2, '8'],
}
user = User(**external_data)
print(user.id)
#> 123
print(repr(user.signup_ts))
#> datetime.datetime(2019, 6, 1, 12, 22)
print(user.friends)
#> [1, 2, 3]
print(user.dict())
"""
{
    'id': 123,
    'signup_ts': datetime.datetime(2019, 6, 1, 12, 22),
    'friends': [1, 2, 3],
    'name': 'John Doe',
}
"""
from jinja2 import Template
template = Template('Hello {{ name }}!')
c=template.render(name='John Doe')
print(c)

import jmespath
path = jmespath.search('foo', {'foo': {'bar': 'baz'}})
print(path)


expression = jmespath.compile('foo.bar')
c=expression.search({'foo': {'bar': 'baz'}})

d=expression.search({'foo': {'bar': 'other'}})
print(c)
print(d)
import jinja2
__TEMPLATE__ = jinja2.Template(
    """# NOTE: Generated By HttpRunner v{{ version }}

import re
import pytest

from requests_wework.testcases.base_case import BaseCase
class {{ class_name }}(BaseCase):

    @pytest.mark.parametrize('{{parameters}}',
                             [])
    def test_create(self, {{parameters}}):
        r=self.basecase('{{path}}', {
            {{parameters}}
        },startAssert=False)
        from jsonpath import jsonpath
        assert 'created' == jsonpath(r, '$.errmsg')[0]

"""
)

data = {
    "class_name": "TestCaseAddress",
     "path":"./address.yaml",
    "parameters": 'userid, name, mobile'
}
content = __TEMPLATE__.render(data)
with open('test_address.py', "w", encoding="utf-8") as f:
    f.write(content)
print(content)

from pathlib import Path
print(sys.path)
sys.path.insert(0, str(Path(__file__).parent.parent))
print("--------------------over0")
print(sys.path)
